# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Points3D

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Points3D(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Points3D()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPoints3D(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Points3D
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Points3D
    def Pos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 12
            from RawData.Points3D.Point3 import Point3
            obj = Point3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Points3D
    def PosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Points3D
    def PosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Points3D
    def Rgb(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 3
            from RawData.Points3D.Rgb import Rgb
            obj = Rgb()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Points3D
    def RgbLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Points3D
    def RgbIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Points3D
    def Xmin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Points3D
    def Xmax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Points3D
    def Ymin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Points3D
    def Ymax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Points3D
    def Zmin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Points3D
    def Zmax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Points3D
    def Rmean(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Points3D
    def Gmean(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Points3D
    def Bmean(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Points3D
    def Rstd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Points3D
    def Gstd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Points3D
    def Bstd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def Points3DStart(builder): builder.StartObject(14)
def Start(builder):
    return Points3DStart(builder)
def Points3DAddPos(builder, pos): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pos), 0)
def AddPos(builder, pos):
    return Points3DAddPos(builder, pos)
def Points3DStartPosVector(builder, numElems): return builder.StartVector(12, numElems, 4)
def StartPosVector(builder, numElems):
    return Points3DStartPosVector(builder, numElems)
def Points3DAddRgb(builder, rgb): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rgb), 0)
def AddRgb(builder, rgb):
    return Points3DAddRgb(builder, rgb)
def Points3DStartRgbVector(builder, numElems): return builder.StartVector(3, numElems, 1)
def StartRgbVector(builder, numElems):
    return Points3DStartRgbVector(builder, numElems)
def Points3DAddXmin(builder, xmin): builder.PrependFloat32Slot(2, xmin, 0.0)
def AddXmin(builder, xmin):
    return Points3DAddXmin(builder, xmin)
def Points3DAddXmax(builder, xmax): builder.PrependFloat32Slot(3, xmax, 0.0)
def AddXmax(builder, xmax):
    return Points3DAddXmax(builder, xmax)
def Points3DAddYmin(builder, ymin): builder.PrependFloat32Slot(4, ymin, 0.0)
def AddYmin(builder, ymin):
    return Points3DAddYmin(builder, ymin)
def Points3DAddYmax(builder, ymax): builder.PrependFloat32Slot(5, ymax, 0.0)
def AddYmax(builder, ymax):
    return Points3DAddYmax(builder, ymax)
def Points3DAddZmin(builder, zmin): builder.PrependFloat32Slot(6, zmin, 0.0)
def AddZmin(builder, zmin):
    return Points3DAddZmin(builder, zmin)
def Points3DAddZmax(builder, zmax): builder.PrependFloat32Slot(7, zmax, 0.0)
def AddZmax(builder, zmax):
    return Points3DAddZmax(builder, zmax)
def Points3DAddRmean(builder, rmean): builder.PrependFloat32Slot(8, rmean, 0.0)
def AddRmean(builder, rmean):
    return Points3DAddRmean(builder, rmean)
def Points3DAddGmean(builder, gmean): builder.PrependFloat32Slot(9, gmean, 0.0)
def AddGmean(builder, gmean):
    return Points3DAddGmean(builder, gmean)
def Points3DAddBmean(builder, bmean): builder.PrependFloat32Slot(10, bmean, 0.0)
def AddBmean(builder, bmean):
    return Points3DAddBmean(builder, bmean)
def Points3DAddRstd(builder, rstd): builder.PrependFloat32Slot(11, rstd, 0.0)
def AddRstd(builder, rstd):
    return Points3DAddRstd(builder, rstd)
def Points3DAddGstd(builder, gstd): builder.PrependFloat32Slot(12, gstd, 0.0)
def AddGstd(builder, gstd):
    return Points3DAddGstd(builder, gstd)
def Points3DAddBstd(builder, bstd): builder.PrependFloat32Slot(13, bstd, 0.0)
def AddBstd(builder, bstd):
    return Points3DAddBstd(builder, bstd)
def Points3DEnd(builder): return builder.EndObject()
def End(builder):
    return Points3DEnd(builder)