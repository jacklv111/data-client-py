# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Rgbd

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RgbdData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RgbdData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRgbdData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RgbdData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RgbdData
    def Image(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # RgbdData
    def ImageAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # RgbdData
    def ImageLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RgbdData
    def ImageIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # RgbdData
    def Depth(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # RgbdData
    def DepthAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # RgbdData
    def DepthLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RgbdData
    def DepthIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # RgbdData
    def Calib(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from RawData.Rgbd.Calib import Calib
            obj = Calib()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def RgbdDataStart(builder): builder.StartObject(3)
def Start(builder):
    return RgbdDataStart(builder)
def RgbdDataAddImage(builder, image): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(image), 0)
def AddImage(builder, image):
    return RgbdDataAddImage(builder, image)
def RgbdDataStartImageVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartImageVector(builder, numElems):
    return RgbdDataStartImageVector(builder, numElems)
def RgbdDataAddDepth(builder, depth): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(depth), 0)
def AddDepth(builder, depth):
    return RgbdDataAddDepth(builder, depth)
def RgbdDataStartDepthVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartDepthVector(builder, numElems):
    return RgbdDataStartDepthVector(builder, numElems)
def RgbdDataAddCalib(builder, calib): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(calib), 0)
def AddCalib(builder, calib):
    return RgbdDataAddCalib(builder, calib)
def RgbdDataEnd(builder): return builder.EndObject()
def End(builder):
    return RgbdDataEnd(builder)